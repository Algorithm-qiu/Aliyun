package solution106;

import java.util.Arrays;

class Solution {

    private int dfs(
            char[] c1, int len1, int pos1,
            char[] c2, int len2, int pos2,
            char[] data, int index) {
        if (index == data.length) {
            return 1;
        }
        int ret = 0;
        if (pos1 < len1 && data[index] == c1[pos1]) {
            ret += dfs(c1, len1, pos1 + 1, c2, len2, pos2, data, index + 1);
        }
        if (pos2 < len2 && data[index] == c2[pos2]) {
            ret += dfs(c1, len1, pos1, c2, len2, pos2 + 1, data, index + 1);
        }
        return ret;
    }

    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }

    private long c(int n, int m) {
        int[] data = new int[m];
        for (int i = 0;i < m;i++) {
            data[i] = n - i;
        }
        for (int i = 1;i <= m;i++) {
            int x = i;
            for (int j = 0;j < m;j++) {
                int d = gcd(data[j], x);
                if (d > 1) {
                    data[j] /= d;
                    x /= d;
                }
                if (x == 1) {
                    break;
                }
            }
        }
        long ret = 1;
        for (int i = 0;i < m;i++) {
            ret *= data[i];
        }
        return ret;
    }

    private long judge(int n, String s) {
        int[] counter = new int[26];
        Arrays.fill(counter, 0);
        for (int i = 0;i < s.length();i++) {
            counter[s.charAt(i) - 'a']++;
        }
        int distinct = 0;
        for (int i = 0;i < 26;i++) {
            if (counter[i] % 2 == 1) {
                return 0;
            }
            if (counter[i] > 0) {
                distinct++;
            }
        }
        if (distinct == 1) {
            return c(2 * n, n);
        }
        return -1;
    }

    public long solution(int n, String s) {
        long a = judge(n, s);
        if (a != -1) {
            return a;
        }

        char[] c1 = new char[n];
        char[] c2 = new char[n];
        char[] data = new char[n];
        for (int i = 2 * n - 1;i >= n;i--) {
            data[2 * n - 1 - i] = s.charAt(i);
        }

        long ret = 0;
        for (int i = 0;i < (1 << n);i++) {
            int len1 = 0, len2 = 0;
            for (int j = 0;j < n;j++) {
                if ((i & (1 << j)) == 0) {
                    c1[len1++] = s.charAt(j);
                } else {
                    c2[len2++] = s.charAt(j);
                }
            }
            ret += dfs(c1, len1, 0, c2, len2, 0, data, 0);
        }

        return ret;

    }

}
